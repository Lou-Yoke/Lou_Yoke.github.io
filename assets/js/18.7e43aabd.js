(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{498:function(t,a,n){"use strict";n.r(a);var r=n(4),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"git分享"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git分享"}},[t._v("#")]),t._v(" Git分享")]),t._v(" "),n("p",[t._v("赞同了该文章")]),t._v(" "),n("h2",{attrs:{id:"一、简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、简介"}},[t._v("#")]),t._v(" 一、简介")]),t._v(" "),n("p",[t._v("git是一个开源的分布式版本控制系统，\n是Linux的老爹为了帮助管理Linux内核开发写的一个开放源码的版本控制工具，跟传统集中式版本管理工具svn相比最大的特点是，每个用户的本地仓库都存放着整个项目的代码，而svn则需要一个集中式的版本服务器。")]),t._v(" "),n("p",[t._v("区分一下：")]),t._v(" "),n("ol",[n("li",[t._v("git：一个开源的分布式版本控制工具")]),t._v(" "),n("li",[t._v("github：一个使用git版本控制工具的全球最大开源代码托管平台")]),t._v(" "),n("li",[t._v("bitbucket：也是一个代码托管平台，商业公司用比较多，支持每个用户免费创建5个私有仓库，而github私有仓库是要钱的")]),t._v(" "),n("li",[t._v("gitlab：一个基于git的项目管理软件，很多公司常用来搭建内部私有代码仓库"),n("br"),t._v("\n了解一下git：")])]),t._v(" "),n("h3",{attrs:{id:"二、基本配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、基本配置"}},[t._v("#")]),t._v(" 二、基本配置")]),t._v(" "),n("p",[t._v("安装")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("# Debian系安装  \nsudo apt-get install git  \n  \n# macOS安装（先确保安装了homebrew）  \nbrew install git  \n")])])]),n("h3",{attrs:{id:"_2-配置账号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置账号"}},[t._v("#")]),t._v(" 2. 配置账号")]),t._v(" "),n("p",[t._v("​"),n("br"),t._v("\n​    # 本着谁污染谁治理的原则，当你commit充满bug的代码的时候git必须提供必要的信息："),n("br"),t._v("\n​    # 比如你是谁，怎么联系你"),n("br"),t._v("\n​    # 注意：当多个用户在同一个服务器上操作git时，配置的时候不要使用--global参数，毕竟你也不想为别人的bug背锅"),n("br"),t._v("\n​    git config --global user.name '"),n("yourname",[t._v("'"),n("br"),t._v("\n​    git config --global user.email '"),n("email",[t._v("'")])],1)],1),t._v(" "),n("h3",{attrs:{id:"_3-创建仓库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建仓库"}},[t._v("#")]),t._v(" 3. 创建仓库")]),t._v(" "),n("p",[t._v("​")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("mkdir <project name>  \ncd <project name>  \ngit init # 将一个目录初始化为一个代码仓库  \n")])])]),n("h3",{attrs:{id:"_4-克隆仓库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-克隆仓库"}},[t._v("#")]),t._v(" 4. 克隆仓库")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("git clone <https://github.com/ananan/project.git>  \n")])])]),n("h2",{attrs:{id:"三、常用操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、常用操作"}},[t._v("#")]),t._v(" 三、常用操作")]),t._v(" "),n("h3",{attrs:{id:"_1-基本操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本操作"}},[t._v("#")]),t._v(" 1. 基本操作")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("# 显示工作目录下已修改的文件  \ngit status  \n  \n# 显示与上次commit的版本相比改了啥  \ngit diff  \n# 也可以查看具体分支的改动  \ngit diff <branch name>  \n  \n# 将修改的文件添加到stage区  \ngit add <target file>  \n  \n# 提交所有修改  \ngit commit -a  \n# 说明一下改动了哪里是比较好的习惯  \ngit commit -m 'changed log'  \n")])])]),n("h3",{attrs:{id:"_2-同步到远程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-同步到远程"}},[t._v("#")]),t._v(" 2. 同步到远程")]),t._v(" "),n("p",[t._v("​"),n("br"),t._v("\n​    # 列出当前配置的远程端仓库"),n("br"),t._v("\n​    git remote -v"),n("br"),t._v("\n​"),n("br"),t._v("\n​    # 显示远程仓库的信息"),n("br"),t._v("\n​    git remote show "),n("remote",{attrs:{repo:""}},[n("br"),t._v("\n​"),n("br"),t._v("\n# 本地仓库与远程仓库关联起来"),n("br"),t._v("\ngit remote add origin "),n("a",{attrs:{href:"http://github.com/ananan/test.git",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://github.com/ananan/test.git"),n("OutboundLink")],1)])],1),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("# 提交本地仓库到远程master分支，第一次提交到master分支时使用 -u 参数，git会把本地master分支和远程  \n# master分支关联起来，在以后的push和pull会方便点  \ngit push -u origin master  \n")])])]),n("h3",{attrs:{id:"_3-更新到本地"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-更新到本地"}},[t._v("#")]),t._v(" 3. 更新到本地")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("# 将当前远程分支的代码拖到本地  \ngit pull  \n  \n# 只拖远程代码，不合并到本地HEAD中  \ngit fetch --all  \n  \n# 当远程与本地的代码发生冲突的时候强制使用远端代码覆盖本地（慎用）  \ngit fetch --all  \ngit reset --hard origin/master  \n")])])]),n("h3",{attrs:{id:"_4-分支管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-分支管理"}},[t._v("#")]),t._v(" 4. 分支管理")]),t._v(" "),n("p",[t._v("分支的理念是版本管理的核心，应该多利用分支")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("# 查看本地分支  \ngit branch  \n# 查看项目所有分支  \ngit branch -a  \n  \n# 在当前分支的基础之上创建并切换到新分支  \ngit branch -b <new branch name>  \n  \n# 删除本地分支  \ngit branch -d <branch name>  \n  \n# 删除远程分支  \ngit push <remote branch name> --delete  \n")])])]),n("h3",{attrs:{id:"_5-标签管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-标签管理"}},[t._v("#")]),t._v(" 5. 标签管理")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("# 查看当前仓库的标签  \ngit tag  \n  \n# 给当前的版本打个标签，比如发布代码的时候搞个版本号  \ngit tag <tag name>  \n# 打标签的时候说明一下是比较好的习惯  \ngit tag -a <tag-name> -m 'tag log'  \n  \n# 推送标签到远程  \ngit push origin <tag-name>  \n")])])]),n("h3",{attrs:{id:"_6-合并与撤销"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-合并与撤销"}},[t._v("#")]),t._v(" 6. 合并与撤销")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("# 将分支合并到当前的HEAD中  \ngit merge <branch>  \n  \n# 合并两个分支  \ngit merge master dev  \n  \n# 放弃工作目录的修改  \ngit reset --hard HEAD  \n")])])]),n("h2",{attrs:{id:"四、进阶"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、进阶"}},[t._v("#")]),t._v(" 四、进阶")]),t._v(" "),n("h3",{attrs:{id:"_1-添加忽略文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-添加忽略文件"}},[t._v("#")]),t._v(" 1.添加忽略文件")]),t._v(" "),n("p",[t._v("在将项目推送到远程的时候最好屏蔽掉与项目无关的文件或者文件夹，可以在项目目录中添加 “.gitignore” 文件来实现。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("# 新建一个.gitignore 文件  \nvim .gitignore  \n  \n# 在文件中添加你要忽略的文件，格式类似正则，忽略实例如下  \n# 忽略指定文件  \n.idea  \n  \n# 忽略类型文件  \n*.jpg  \n*.png  \n  \n# a.png 指定文件除外  \n!a.png  \n  \n# 忽略指定目录  \nsrc/  \n")])])]),n("h3",{attrs:{id:"_2-冲突解决"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-冲突解决"}},[t._v("#")]),t._v(" 2. 冲突解决")]),t._v(" "),n("p",[t._v("分支冲突在git中是很常见的情况，当要从远程仓库拉取代码时会可能与本地分支会冲突，推送的时候也可能发生冲突。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("# 强制使用远程代码覆盖本地，先fetch远程代码，在不做任何的合并的情况下使用git reset 把HEAD指向刚刚下载的最新的版本  \ngit fetch --all  \ngit reset --hard origin/master  \n  \n# 将本地分支强制推送到远程，加上-f参数，但不推荐  \ngit push origin master -f  \n  \n# 大多数情况其实可以避免冲突的发生  \n# 1. 在修改代码之前先git pull一下  \n# 2. 将业务代码进行划分，尽量不要多个人同时修改同一个文件  \n# 3. 通过gitflow工作流提升git流程效率，一定程度避免冲突的发生  \n")])])]),n("h2",{attrs:{id:"五、总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、总结"}},[t._v("#")]),t._v(" 五、总结")]),t._v(" "),n("p",[t._v("版本控制是一个非常大的话题，git的分布式和工作流都是非常好的设计，可惜我目前对git的了解也仅停留在初步的使用，之前朋友推荐了一本书pro-\ngit的书，看了几章，非常收益。不过我一直认为，对于工具类的学习，大多数情况是按需而学，刻意去学而不用，很快也会忘掉，所以以后还是多多使用才行。")]),t._v(" "),n("p",[t._v("分享几个资源：")]),t._v(" "),n("p",[t._v("Pro-git中文翻译版链接（正不正版就不清楚了）："),n("a",{attrs:{href:"https://gitee.com/progit/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pro Git（中文版）"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("快速上手教程： "),n("a",{attrs:{href:"http://www.runoob.com/git/git-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 教程 | 菜鸟教程"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("廖雪峰博客写的也不错： "),n("a",{attrs:{href:"http://www.runoob.com/git/git-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git教程"),n("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);