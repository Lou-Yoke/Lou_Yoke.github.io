(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{516:function(e,a,r){"use strict";r.r(a);var n=r(4),t=Object(n.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"fastjson详解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#fastjson详解"}},[e._v("#")]),e._v(" fastjson详解")]),e._v(" "),r("p",[e._v("fastjson用于将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。")]),e._v(" "),r("h2",{attrs:{id:"简单使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简单使用"}},[e._v("#")]),e._v(" 简单使用")]),e._v(" "),r("p",[e._v("通过maven引入相应的json包")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("<dependencies>  \n    <dependency>  \n        <groupId>com.alibaba</groupId>  \n        <artifactId>fastjson</artifactId>  \n        <version>1.2.49</version>  \n    </dependency>  \n</dependencies>  \n")])])]),r("p",[e._v("定义一个需要转换所实体类User，代码如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('package com.ivan.json.entity;  \n  \nimport java.util.Date;  \n  \nimport com.alibaba.fastjson.annotation.JSONField;  \n  \npublic class User {  \n  \n    private Long   id;  \n  \n    private String name;  \n  \n    @JSONField(format = "yyyy-MM-dd HH:mm:ss")  \n    private Date   createTime;  \n  \n    public Long getId() {  \n        return id;  \n    }  \n  \n    public void setId(Long id) {  \n        this.id = id;  \n    }  \n  \n    public String getName() {  \n        return name;  \n    }  \n  \n    public void setName(String name) {  \n        this.name = name;  \n    }  \n  \n    public Date getCreateTime() {  \n        return createTime;  \n    }  \n  \n    public void setCreateTime(Date createTime) {  \n        this.createTime = createTime;  \n    }  \n      \n}  \n')])])]),r("p",[e._v("写个简单的测试类用于测试fastjson的序列化与反序列化，代码如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('package com.ivan.json;  \n  \nimport java.util.Date;  \n  \nimport com.alibaba.fastjson.JSON;  \nimport com.ivan.json.entity.User;  \n  \npublic class SimpleTest {  \n  \n    public static void main(String[] args) {  \n        serialize();  \n        deserialize();  \n    }  \n  \n    public static void serialize() {  \n        User user = new User();  \n        user.setId(11L);  \n        user.setName("西安");  \n        user.setCreateTime(new Date());  \n        String jsonString = JSON.toJSONString(user);  \n        System.out.println(jsonString);  \n    }  \n  \n    public static void deserialize() {  \n        String jsonString = "{\\"createTime\\":\\"2018-08-17 14:38:38\\",\\"id\\":11,\\"name\\":\\"西安\\"}";  \n        User user = JSON.parseObject(jsonString, User.class);  \n        System.out.println(user.getName());  \n        System.out.println(user.getCreateTime());  \n    }  \n}  \n')])])]),r("h2",{attrs:{id:"serializerfeature特性的使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#serializerfeature特性的使用"}},[e._v("#")]),e._v(" SerializerFeature特性的使用")]),e._v(" "),r("p",[e._v("fastjson通过SerializerFeature对生成的json格式的数据进行一些定制，比如可以输入的格式更好看，使用单引号而非双引号等。例子程序如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("package com.ivan.json;  \n  \nimport java.util.Date;  \n  \nimport com.alibaba.fastjson.JSON;  \nimport com.alibaba.fastjson.serializer.SerializerFeature;  \nimport com.ivan.json.entity.User;  \n  \npublic class SerializerFeatureTest {  \n  \n    public static void main(String[] args) {  \n        User user = new User();  \n        user.setId(11L);  \n        user.setCreateTime(new Date());  \n        String jsonString = JSON.toJSONString(user, SerializerFeature.PrettyFormat,   \n                SerializerFeature.WriteNullStringAsEmpty, SerializerFeature.UseSingleQuotes);  \n        System.out.println(jsonString);  \n  \n    }  \n  \n}  \n")])])]),r("p",[e._v("输出的结果如下："),r("br"),e._v("\n![](https://upload-\nimages.jianshu.io/upload_images/5796101-e4258d1405f31078.png?imageMogr2/auto-\norient/strip%7CimageView2/2/w/798/format/webp)")]),e._v(" "),r("p",[e._v("SerializerFeature常用属性")]),e._v(" "),r("table",[r("thead",[r("tr",[r("th",[e._v("名称")]),e._v(" "),r("th",[e._v("含义")])])]),e._v(" "),r("tbody",[r("tr",[r("td",[e._v("QuoteFieldNames")]),e._v(" "),r("td",[e._v("输出key时是否使用双引号,默认为true")])]),e._v(" "),r("tr",[r("td",[e._v("UseSingleQuotes")]),e._v(" "),r("td",[e._v("使用单引号而不是双引号,默认为false")])]),e._v(" "),r("tr",[r("td",[e._v("WriteMapNullValue")]),e._v(" "),r("td",[e._v("是否输出值为null的字段,默认为false")])]),e._v(" "),r("tr",[r("td",[e._v("WriteEnumUsingToString")]),e._v(" "),r("td",[e._v("Enum输出name()或者original,默认为false")])]),e._v(" "),r("tr",[r("td",[e._v("UseISO8601DateFormat")]),e._v(" "),r("td",[e._v("Date使用ISO8601格式输出，默认为false")])]),e._v(" "),r("tr",[r("td",[e._v("WriteNullListAsEmpty")]),e._v(" "),r("td",[e._v("List字段如果为null,输出为[],而非null")])]),e._v(" "),r("tr",[r("td",[e._v("WriteNullStringAsEmpty")]),e._v(" "),r("td",[e._v("字符类型字段如果为null,输出为”“,而非null")])])])]),e._v(" "),r("p",[e._v("WriteNullNumberAsZero|数值字段如果为null,输出为0,而非null|"),r("br"),e._v("\n|WriteNullBooleanAsFalse|"),r("br"),e._v("\nBoolean字段如果为null,输出为false,而非null|"),r("br"),e._v("\n|SkipTransientField|如果是true，类中的Get方法对应的Field是transient，序列化时将会被忽略。默认为true|"),r("br"),e._v("\n|SortField|按字段名称排序后输出。默认为false|"),r("br"),e._v("\n|WriteTabAsSpecial|把\\t做转义输出，默认为false不推荐设为true|"),r("br"),e._v("\n|PrettyFormat|结果是否格式化,默认为false|"),r("br"),e._v("\n|WriteClassName|序列化时写入类型信息，默认为false。反序列化是需用到|"),r("br"),e._v("\n|DisableCircularReferenceDetect|消除对同一对象循环引用的问题，默认为false|"),r("br"),e._v("\n|WriteSlashAsSpecial|对斜杠’/’进行转义|"),r("br"),e._v("\n|BrowserCompatible|将中文都会序列化为\\uXXXX格式，字节数会多一些，但是能兼容IE 6，默认为false|"),r("br"),e._v("\n|WriteDateUseDateFormat|全局修改日期格式,默认为false。|"),r("br"),e._v("\n|DisableCheckSpecialChar|一个对象的字符串属性中如果有特殊字符如双引号，将会在转成json时带有反斜杠转移符。如果不需要转义，可以使用这个属性。默认为false|"),r("br"),e._v("\n|BeanToArray|将对象转为array输出|")]),e._v(" "),r("h2",{attrs:{id:"jsonfield与jsontype注解的使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jsonfield与jsontype注解的使用"}},[e._v("#")]),e._v(" JSONField与JSONType注解的使用")]),e._v(" "),r("p",[e._v("fastjson提供了JSONField对序列化与反序列化进行定制，比如可以指定字段的名称，序列化的顺序。JSONField用于属性，方法方法参数上。JSONField的源码如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('package com.alibaba.fastjson.annotation;  \n  \nimport java.lang.annotation.ElementType;  \nimport java.lang.annotation.Retention;  \nimport java.lang.annotation.RetentionPolicy;  \nimport java.lang.annotation.Target;  \nimport com.alibaba.fastjson.parser.Feature;  \nimport com.alibaba.fastjson.serializer.SerializerFeature;  \n  \n@Retention(RetentionPolicy.RUNTIME)  \n@Target({ ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER })  \npublic @interface JSONField {  \n// 配置序列化和反序列化的顺序  \n    int ordinal() default 0;  \n// 指定字段的名称  \n    String name() default "";  \n// 指定字段的格式，对日期格式有用  \n    String format() default "";  \n // 是否序列化  \n    boolean serialize() default true;  \n// 是否反序列化  \n    boolean deserialize() default true;  \n//字段级别的SerializerFeature  \n    SerializerFeature[] serialzeFeatures() default {};  \n//  \n    Feature[] parseFeatures() default {};  \n   //给属性打上标签， 相当于给属性进行了分组  \n    String label() default "";  \n      \n    boolean jsonDirect() default false;  \n      \n//制定属性的序列化类  \n    Class<?> serializeUsing() default Void.class;  \n //制定属性的反序列化类  \n    Class<?> deserializeUsing() default Void.class;  \n  \n    String[] alternateNames() default {};  \n  \n    boolean unwrapped() default false;  \n}  \n')])])]),r("p",[e._v("其中serializeUsing与deserializeUsing可以用于对字段的序列化与反序列化进行定制化。比如我们在User实体上加上个sex属性，类型为boolean。下面分别定义了序列化类与反序列化类，序列化类代码如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('package com.ivan.json.converter;  \n  \nimport java.io.IOException;  \nimport java.lang.reflect.Type;  \n  \nimport com.alibaba.fastjson.serializer.JSONSerializer;  \nimport com.alibaba.fastjson.serializer.ObjectSerializer;  \n  \npublic class SexSerializer implements ObjectSerializer {  \n  \n    public void write(JSONSerializer serializer,  \n                      Object object,  \n                      Object fieldName,  \n                      Type fieldType,  \n                      int features)  \n            throws IOException {  \n        Boolean value = (Boolean) object;  \n        String text = "女";  \n        if (value != null && value == true) {  \n            text = "男";  \n        }  \n        serializer.write(text);  \n    }  \n  \n}  \n')])])]),r("p",[e._v("反序列化类代码如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("package com.ivan.json.converter;  \n  \nimport java.lang.reflect.Type;  \n")])])]),r("p",[e._v("​"),r("br"),e._v("\n​    import com.alibaba.fastjson.parser.DefaultJSONParser;"),r("br"),e._v("\n​    import com.alibaba.fastjson.parser.JSONToken;"),r("br"),e._v("\n​    import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;"),r("br"),e._v("\n​"),r("br"),e._v("\n​    public class SexDeserialize implements ObjectDeserializer {"),r("br"),e._v("\n​"),r("br"),e._v("\npublic "),r("T",[e._v(" T deserialze(DefaultJSONParser parser,"),r("br"),e._v("\nType type,"),r("br"),e._v("\nObject fieldName) {")])],1),e._v(" "),r("p",[e._v("​"),r("br"),e._v("\n​"),r("br"),e._v("\n​            String sex = parser.parseObject(String.class);"),r("br"),e._v('\n​            if ("男".equals(sex)) {'),r("br"),e._v("\n​                return (T) Boolean.TRUE;"),r("br"),e._v("\n​            } else {"),r("br"),e._v("\n​                return (T) Boolean.FALSE;"),r("br"),e._v("\n​            }"),r("br"),e._v("\n​        }"),r("br"),e._v("\n​"),r("br"),e._v("\n​        public int getFastMatchToken() {"),r("br"),e._v("\n​            return JSONToken.UNDEFINED;"),r("br"),e._v("\n​        }"),r("br"),e._v("\n​"),r("br"),e._v("\n}")]),e._v(" "),r("p",[e._v("fastjosn提供了JSONType用于类级别的定制化, JSONType的源码如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('package com.alibaba.fastjson.annotation;  \n  \nimport java.lang.annotation.ElementType;  \nimport java.lang.annotation.Retention;  \nimport java.lang.annotation.RetentionPolicy;  \nimport java.lang.annotation.Target;  \n  \nimport com.alibaba.fastjson.PropertyNamingStrategy;  \nimport com.alibaba.fastjson.parser.Feature;  \nimport com.alibaba.fastjson.serializer.SerializeFilter;  \nimport com.alibaba.fastjson.serializer.SerializerFeature;  \n  \n@Retention(RetentionPolicy.RUNTIME)  \n//需要标注在类上  \n@Target({ ElementType.TYPE })  \npublic @interface JSONType {  \n  \n    boolean asm() default true;  \n//这里可以定义输出json的字段顺序  \n    String[] orders() default {};  \n//包含的字段  \n    String[] includes() default {};  \n//不包含的字段  \n    String[] ignores() default {};  \n//类级别的序列化特性定义  \n    SerializerFeature[] serialzeFeatures() default {};  \n    Feature[] parseFeatures() default {};  \n    //按字母顺序进行输出  \n    boolean alphabetic() default true;  \n      \n    Class<?> mappingTo() default Void.class;  \n      \n    Class<?> builder() default Void.class;  \n      \n    String typeName() default "";  \n  \n    String typeKey() default "";  \n      \n    Class<?>[] seeAlso() default{};  \n    //序列化类  \n    Class<?> serializer() default Void.class;  \n    //反序列化类  \n    Class<?> deserializer() default Void.class;  \n  \n    boolean serializeEnumAsJavaBean() default false;  \n  \n    PropertyNamingStrategy naming() default PropertyNamingStrategy.CamelCase;  \n  \n    Class<? extends SerializeFilter>[] serialzeFilters() default {};  \n}  \n')])])]),r("h2",{attrs:{id:"serializefilter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#serializefilter"}},[e._v("#")]),e._v(" SerializeFilter")]),e._v(" "),r("p",[e._v("fastjson通过SerializeFilter编程扩展的方式定制序列化fastjson支持以下SerializeFilter用于不同常景的定制序列化：")]),e._v(" "),r("p",[e._v("PropertyFilter 根据PropertyName和PropertyValue来判断是否序列化,接口定义如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("package com.alibaba.fastjson.serializer;  \n  \n/**  \n * @author wenshao[szujobs@hotmail.com]  \n */  \npublic interface PropertyFilter extends SerializeFilter {  \n  \n    /**  \n     * @param object the owner of the property  \n     * @param name the name of the property  \n     * @param value the value of the property  \n     * @return true if the property will be included, false if to be filtered out  \n    * 根据 属性的name与value判断是否进行序列化  \n     */  \n    boolean apply(Object object, String name, Object value);  \n}  \n")])])]),r("p",[e._v("PropertyPreFilter根据PropertyName判断是否序列化")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("package com.alibaba.fastjson.serializer;  \n  \npublic interface PropertyPreFilter extends SerializeFilter {  \n  \n//根据 object与name判断是否进行序列化  \n    boolean apply(JSONSerializer serializer, Object object, String name);  \n}  \n")])])]),r("p",[e._v("NameFilter 序列化时修改Key")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("package com.alibaba.fastjson.serializer;  \n  \npublic interface NameFilter extends SerializeFilter {  \n//根据 name与value的值，返回json字段key的值  \n    String process(Object object, String name, Object value);  \n}  \n")])])]),r("p",[e._v("ValueFilter 序列化时修改Value")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("package com.alibaba.fastjson.serializer;  \n  \npublic interface ValueFilter extends SerializeFilter {  \n  //根据name与value定制输出json的value  \n    Object process(Object object, String name, Object value);  \n}  \n")])])]),r("p",[e._v("BeforeFilter 在序列化对象的所有属性之前执行某些操作")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("package com.alibaba.fastjson.serializer;  \n  \npublic abstract class BeforeFilter implements SerializeFilter {  \n  \n    private static final ThreadLocal<JSONSerializer> serializerLocal = new ThreadLocal<JSONSerializer>();  \n    private static final ThreadLocal<Character>      seperatorLocal  = new ThreadLocal<Character>();  \n  \n    private final static Character                   COMMA           = Character.valueOf(',');  \n  \n    final char writeBefore(JSONSerializer serializer, Object object, char seperator) {  \n        serializerLocal.set(serializer);  \n        seperatorLocal.set(seperator);  \n        writeBefore(object);  \n        serializerLocal.set(null);  \n        return seperatorLocal.get();  \n    }  \n  \n    protected final void writeKeyValue(String key, Object value) {  \n        JSONSerializer serializer = serializerLocal.get();  \n        char seperator = seperatorLocal.get();  \n        serializer.writeKeyValue(seperator, key, value);  \n        if (seperator != ',') {  \n            seperatorLocal.set(COMMA);  \n        }  \n    }  \n//需要实现的方法，在实际实现中可以调用writeKeyValue增加json的内容  \n    public abstract void writeBefore(Object object);  \n}  \n")])])]),r("p",[e._v("AfterFilter 在序列化对象的所有属性之后执行某些操作")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("package com.alibaba.fastjson.serializer;  \n  \n/**  \n * @since 1.1.35  \n */  \npublic abstract class AfterFilter implements SerializeFilter {  \n  \n    private static final ThreadLocal<JSONSerializer> serializerLocal = new ThreadLocal<JSONSerializer>();  \n    private static final ThreadLocal<Character>      seperatorLocal  = new ThreadLocal<Character>();  \n  \n    private final static Character                   COMMA           = Character.valueOf(',');  \n  \n    final char writeAfter(JSONSerializer serializer, Object object, char seperator) {  \n        serializerLocal.set(serializer);  \n        seperatorLocal.set(seperator);  \n        writeAfter(object);  \n        serializerLocal.set(null);  \n        return seperatorLocal.get();  \n    }  \n  \n    protected final void writeKeyValue(String key, Object value) {  \n        JSONSerializer serializer = serializerLocal.get();  \n        char seperator = seperatorLocal.get();  \n        serializer.writeKeyValue(seperator, key, value);  \n        if (seperator != ',') {  \n            seperatorLocal.set(COMMA);  \n        }  \n    }  \n//子类需要实现的方法，实际使用的时候可以调用writeKeyValue增加内容  \n    public abstract void writeAfter(Object object);  \n}  \n")])])]),r("p",[e._v("LabelFilter根据 JsonField配置的label来判断是否进行输出")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("package com.alibaba.fastjson.serializer;  \n  \n//根据 JsonField配置的label来判断是否进行输出  \npublic interface LabelFilter extends SerializeFilter {  \n    boolean apply(String label);  \n}  \n")])])]),r("h2",{attrs:{id:"泛型反序列化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#泛型反序列化"}},[e._v("#")]),e._v(" 泛型反序列化")]),e._v(" "),r("p",[e._v("fastjson通过TypeReference来实现泛型的反序列化，以下是一个简单的例子程序。首先定义了BaseDTO用于所有DTO的父类，代码如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("package com.ivan.frame.dto.common;  \n  \nimport java.io.Serializable;  \n  \nimport com.alibaba.fastjson.JSONObject;  \n  \npublic class BaseDTO implements Serializable{  \n  \n    private static final long  serialVersionUID = 2230553030766621644L;  \n  \n    @Override  \n    public String toString() {  \n        return JSONObject.toJSONString(this);  \n    }  \n  \n}  \n")])])]),r("p",[e._v("RequestDTO用于抽像所有的请求DTO，里面有个泛型参数，代码如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("package com.ivan.frame.dto.common;  \n")])])]),r("p",[e._v("​"),r("br"),e._v("\n​    public final class RequestDTO"),r("T",{attrs:{extends:"",BaseDTO:""}},[e._v(" extends BaseDTO {"),r("br"),e._v("\n​"),r("br"),e._v("\n​        private static final long serialVersionUID = -2780042604928728379L;"),r("br"),e._v("\n​"),r("br"),e._v("\n/**"),r("br"),e._v("\n* 调用方的名称"),r("br"),e._v("\n*/"),r("br"),e._v("\nprivate String            caller;")])],1),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("    /**  \n     * 请求参数  \n     */  \n    private T                 param;  \n")])])]),r("p",[e._v("​"),r("br"),e._v("\n​"),r("br"),e._v("\n​        public String getCaller() {"),r("br"),e._v("\n​            return caller;"),r("br"),e._v("\n​        }"),r("br"),e._v("\n​"),r("br"),e._v("\n​        public void setCaller(String caller) {"),r("br"),e._v("\n​            this.caller = caller;"),r("br"),e._v("\n​        }"),r("br"),e._v("\n​"),r("br"),e._v("\n/**"),r("br"),e._v("\n* 获取请求参数"),r("br"),e._v("\n*/"),r("br"),e._v("\npublic T getParam() {"),r("br"),e._v("\nreturn param;"),r("br"),e._v("\n}")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("    /**  \n     * 设置请求参数  \n     *   \n     * @param param 请求参数  \n     */  \n    public void setParam(T param) {  \n        this.param = param;  \n    }  \n  \n}  \n")])])]),r("p",[e._v("定义一个具体的业务对象， PersonDTO代码如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("package com.ivan.frame.dto;  \n  \nimport com.ivan.frame.dto.common.BaseDTO;  \n  \npublic class PersonDTO extends BaseDTO {  \n      \n    private static final long serialVersionUID = 4637634512292751986L;  \n      \n    private int id;  \n    private int age;  \n    private String name;  \n      \n    public int getId() {  \n        return id;  \n    }  \n    public void setId(int id) {  \n        this.id = id;  \n    }  \n    public int getAge() {  \n        return age;  \n    }  \n    public void setAge(int age) {  \n        this.age = age;  \n    }  \n    public String getName() {  \n        return name;  \n    }  \n    public void setName(String name) {  \n        this.name = name;  \n    }  \n      \n}  \n")])])]),r("p",[e._v("通过JSON.parseObject传入TypeReference对象进行泛型转换，代码如下：")]),e._v(" "),r("p",[e._v("​"),r("br"),e._v("\n​    package com.ivan.json;"),r("br"),e._v("\n​"),r("br"),e._v("\n​    import com.alibaba.fastjson.JSON;"),r("br"),e._v("\n​    import com.alibaba.fastjson.TypeReference;"),r("br"),e._v("\n​    import com.ivan.frame.dto.PersonDTO;"),r("br"),e._v("\n​    import com.ivan.frame.dto.common.RequestDTO;"),r("br"),e._v("\n​"),r("br"),e._v("\npublic class GenericTest {")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('    public static void main(String[] args) {  \n        RequestDTO<PersonDTO> requestDTO = new RequestDTO<PersonDTO>();  \n        requestDTO.setCaller("callerId");  \n        PersonDTO personDTO = new PersonDTO();  \n        personDTO.setAge(11);  \n        personDTO.setName("张三");  \n        requestDTO.setParam(personDTO);  \n          \n        String jsonString = JSON.toJSONString(requestDTO);  \n        System.out.println(jsonString);  \n        //这行是关键代码  \n        requestDTO = JSON.parseObject(jsonString, new TypeReference<RequestDTO<PersonDTO>>(){});  \n')])])]),r("p",[e._v("​"),r("br"),e._v("\n​            System.out.println(requestDTO.getParam().getName());"),r("br"),e._v("\n​        }"),r("br"),e._v("\n​    }")]),e._v(" "),r("h2",{attrs:{id:"fastjson各种概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#fastjson各种概念"}},[e._v("#")]),e._v(" fastjson各种概念")]),e._v(" "),r("ul",[r("li",[e._v("JSON：本身是Abstract，提供了一系统的工具方法方便用户使用的API。")])]),e._v(" "),r("h3",{attrs:{id:"序列化相关的概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#序列化相关的概念"}},[e._v("#")]),e._v(" 序列化相关的概念")]),e._v(" "),r("ul",[r("li",[e._v("SerializeConfig：内部是个map容器主要功能是配置并记录每种Java类型对应的序列化类。")]),e._v(" "),r("li",[e._v("SerializeWriter 继承自Java的Writer，其实就是个转为FastJSON而生的")]),e._v(" "),r("li",[e._v("StringBuilder，完成高性能的字符串拼接。")]),e._v(" "),r("li",[e._v("SerializeFilter: 用于对对象的序列化实现各种定制化的需求。")]),e._v(" "),r("li",[e._v("SerializerFeature：对于对输出的json做各种格式化的需求。")]),e._v(" "),r("li",[e._v("JSONSerializer：相当于一个序列化组合器，集成了SerializeConfig， SerializeWriter ， SerializeFilter与SerializerFeature。")])]),e._v(" "),r("p",[e._v("序列化的入口代码如下，上面提到的各种概念都包含了")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("public static String toJSONString(Object object, //   \n                                  SerializeConfig config, //   \n                                  SerializeFilter[] filters, //   \n                                  String dateFormat, //  \n                                  int defaultFeatures, //   \n                                  SerializerFeature... features) {  \n    SerializeWriter out = new SerializeWriter(null, defaultFeatures, features);  \n  \n    try {  \n        JSONSerializer serializer = new JSONSerializer(out, config);  \n          \n        if (dateFormat != null && dateFormat.length() != 0) {  \n            serializer.setDateFormat(dateFormat);  \n            serializer.config(SerializerFeature.WriteDateUseDateFormat, true);  \n        }  \n  \n        if (filters != null) {  \n            for (SerializeFilter filter : filters) {  \n                serializer.addFilter(filter);  \n            }  \n        }  \n  \n        serializer.write(object);  \n  \n        return out.toString();  \n    } finally {  \n        out.close();  \n    }  \n}  \n")])])]),r("h3",{attrs:{id:"反序列化相关的概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#反序列化相关的概念"}},[e._v("#")]),e._v(" 反序列化相关的概念")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("ParserConfig：内部通过一个map保存各种ObjectDeserializer。")])]),e._v(" "),r("li",[r("p",[e._v("JSONLexer : 与SerializeWriter相对应，用于解析json字符串。")])]),e._v(" "),r("li",[r("p",[e._v("JSONToken：定义了一系统的特殊字符，这些称为token。")])]),e._v(" "),r("li",[r("p",[e._v("ParseProcess ：定制反序列化，类似于SerializeFilter。")])]),e._v(" "),r("li",[r("p",[e._v("Feature：用于定制各种反序列化的特性。")])]),e._v(" "),r("li",[r("p",[e._v("DefaultJSONParser：相当于反序列化组合器，集成了ParserConfig，Feature， JSONLexer 与ParseProcess。")])]),e._v(" "),r("li",[r("p",[e._v("反序列化的入口代码如下，上面的概念基本都包含了：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('@SuppressWarnings("unchecked")  \n')])])]),r("p",[e._v("public static "),r("T",[e._v(" T parseObject(String input, Type clazz, ParserConfig config, ParseProcess processor,"),r("br"),e._v("\nint featureValues, Feature... features) {"),r("br"),e._v("\nif (input == null) {"),r("br"),e._v("\nreturn null;"),r("br"),e._v("\n}")])],1),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("if (features != null) {  \n    for (Feature feature : features) {  \n        featureValues |= feature.mask;  \n    }  \n}  \n  \nDefaultJSONParser parser = new DefaultJSONParser(input, config, featureValues);  \n  \nif (processor != null) {  \n    if (processor instanceof ExtraTypeProvider) {  \n        parser.getExtraTypeProviders().add((ExtraTypeProvider) processor);  \n    }  \n  \n    if (processor instanceof ExtraProcessor) {  \n        parser.getExtraProcessors().add((ExtraProcessor) processor);  \n    }  \n  \n    if (processor instanceof FieldTypeResolver) {  \n        parser.setFieldTypeResolver((FieldTypeResolver) processor);  \n    }  \n}  \n  \nT value = (T) parser.parseObject(clazz, null);  \n  \nparser.handleResovleTask(value);  \n  \nparser.close();  \n  \nreturn (T) value;  \n")])])]),r("p",[e._v("}")])])]),e._v(" "),r("h2",{attrs:{id:"与spring-mvc整合"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#与spring-mvc整合"}},[e._v("#")]),e._v(" 与Spring MVC整合")]),e._v(" "),r("p",[e._v("fastjson提供了FastJsonHttpMessageConverter用于将Spring\nmvc里的body数据(必须是json格式)转成Controller里的请求参数或者将输出的对象转成json格式的数据。spring\nmvc里的核心配置如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('<mvc:annotation-driven conversion-service="conversionService">  \n    <mvc:message-converters register-defaults="true">  \n        <bean  \n            class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">  \n            <property name="supportedMediaTypes">  \n                <list>  \n                    <value>text/html;charset=UTF-8</value>  \n                    <value>application/json;charset=UTF-8</value>  \n                </list>  \n            </property>  \n            <property name="features">  \n                <array>  \n                    <value>WriteMapNullValue</value>  \n                    <value>WriteNullStringAsEmpty</value>  \n                </array>  \n            </property>  \n        </bean>  \n    </mvc:message-converters>  \n</mvc:annotation-driven>  \n')])])]),r("p",[e._v("这里有一个注意点，当你用Spring\n3或者fastjson使用的是1.1.x的版本，在转换带有泛型参数类型的时候无法进行转换，而在Spring4配合fastjson1.2.X的版本可以解决这个问题。FastJsonHttpMessageConverter\nread的核心代码如下：")]),e._v(" "),r("p",[e._v("​"),r("br"),e._v("\n​    public class FastJsonHttpMessageConverter extends AbstractHttpMessageConverter"),r("Object",[e._v("//"),r("br"),e._v("\n​            implements GenericHttpMessageConverter"),r("Object",[e._v(" {"),r("br"),e._v("\n​"),r("br"),e._v("\n​    //将json转成javabean的时候会调用。这里的type"),r("br"),e._v("\n​        public Object read(Type type, //"),r("br"),e._v("\n​                           Class<?> contextClass, //"),r("br"),e._v("\n​                           HttpInputMessage inputMessage //"),r("br"),e._v("\n​        ) throws IOException, HttpMessageNotReadableException {"),r("br"),e._v("\n​            return readType(getType(type, contextClass), inputMessage);"),r("br"),e._v("\n​        }"),r("br"),e._v("\n​"),r("br"),e._v("\n//这里会通过Spring4TypeResolvableHelper得到类型参数，"),r("br"),e._v("\nprotected Type getType(Type type, Class<?> contextClass) {"),r("br"),e._v("\nif (Spring4TypeResolvableHelper.isSupport()) {"),r("br"),e._v("\nreturn Spring4TypeResolvableHelper.getType(type, contextClass);"),r("br"),e._v("\n}")])],1)],1),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("        return type;  \n    }  \n  \n}  ")])])])])}),[],!1,null,null,null);a.default=t.exports}}]);