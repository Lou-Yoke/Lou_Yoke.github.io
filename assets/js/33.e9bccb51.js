(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{512:function(e,t,a){"use strict";a.r(t);var s=a(4),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"git使用流程规范-merge-reqeust"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git使用流程规范-merge-reqeust"}},[e._v("#")]),e._v(" git使用流程规范(merge-reqeust)")]),e._v(" "),a("blockquote",[a("p",[e._v("如果你的git workflow 采用此模式，谨记一定要忘记git merge，除了在master分支上git pull 可以使用git pull\n,其他分支如果要 git pull 应该使用 git pull -irebase"),a("br"),e._v("\n使用git rebase的黄金法则就是：分支的开发者尽量是一个人，重写提交历史不会影响别人")])]),e._v(" "),a("ol",[a("li",[a("p",[e._v("新建分支")]),e._v(" "),a("h1",{attrs:{id:"创建分支前，先切换到master分支，更新到最新版本，确保你的新分支是基于最新版本的master"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建分支前，先切换到master分支，更新到最新版本，确保你的新分支是基于最新版本的master"}},[e._v("#")]),e._v(" 创建分支前，先切换到master分支，更新到最新版本，确保你的新分支是基于最新版本的master")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("# 在master分支上基本上只有一个操作 git pull  \ngit checkout master  \ngit pull  \n# 创建分支git checkout 命令是切换分支，加上参数-b表示如果分支不存在，就创建，且立即切换到新创建的分支  \ngit checkout -b myfeature  \n")])])]),a("ol",[a("li",[a("p",[e._v("分支开发")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("# 添加工作区改变的文件到暂存区，尽量git add file1 file2,不提倡git add *  \n")])])]),a("p",[e._v("git add *")]),e._v(" "),a("h1",{attrs:{id:"查看当前工作区的状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看当前工作区的状态"}},[e._v("#")]),e._v(" 查看当前工作区的状态")]),e._v(" "),a("p",[e._v("git status")]),e._v(" "),a("h1",{attrs:{id:"把暂存区内容放入版本库，加上verbose参数的话会对变化比较且显示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#把暂存区内容放入版本库，加上verbose参数的话会对变化比较且显示"}},[e._v("#")]),e._v(" 把暂存区内容放入版本库，加上verbose参数的话会对变化比较且显示")]),e._v(" "),a("p",[e._v("git commit -- verbose")])]),e._v(" "),a("li",[a("p",[e._v("撰写提交信息")])])]),e._v(" "),a("blockquote",[a("p",[e._v("git提交的信息分厂重要"),a("br"),e._v("\n第一行是信息摘要50字以内"),a("br"),e._v("\n空一行，"),a("br"),e._v("\n第三行罗列出改变原因，主要变动，注意事项"),a("br"),e._v("\n切记提交有意义的commit message")])]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("p",[e._v("与主干同步")]),e._v(" "),a("h1",{attrs:{id:"拉取远程端仓库所有变更内容到本地仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拉取远程端仓库所有变更内容到本地仓库"}},[e._v("#")]),e._v(" 拉取远程端仓库所有变更内容到本地仓库")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("# 注意和git pull 的区别，git pull = git fetch + git merger(rebase)  \ngit fetch origin  \n")])])]),a("p",[e._v("---|---")]),e._v(" "),a("p",[e._v("假设分支myfeature是几个人共同开发，这个时候需要执行")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("# 次操作可能会产生冲突，且解决完之后push的时候，可能要加上 --force参数强制推送代码，改变提交历史记录，慎用  \ngit pull --rebase  \n")])])]),a("ol",[a("li",[a("p",[e._v("合并 commit"),a("br"),e._v("\n此处操作是最复杂的")]),e._v(" "),a("h1",{attrs:{id:"rebase命令和merge相仿，，-i参数表示交互模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebase命令和merge相仿，，-i参数表示交互模式"}},[e._v("#")]),e._v(" rebase命令和merge相仿，，-i参数表示交互模式")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("git rebase -i origin/master  \n")])])]),a("p",[e._v("---|---")]),e._v(" "),a("blockquote",[a("p",[e._v("使用交互模式，可以合并同一个分支里面的多个commit为一个或者多个，能灵活控制commit。"),a("br"),e._v("\n当执行rebase发生冲突的时候，先解决冲突文件，使用git add标志所有冲突为已经解决。最后 git rebase\n–continue完成rebase流程")])]),e._v(" "),a("ol",[a("li",[a("p",[e._v("推送代码到远程")]),e._v(" "),a("h1",{attrs:{id:"push-命令加上-force参数，因为rebase之后，分支历史改变，跟远程分支不一定兼容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push-命令加上-force参数，因为rebase之后，分支历史改变，跟远程分支不一定兼容"}},[e._v("#")]),e._v(" push 命令加上--force参数，因为rebase之后，分支历史改变，跟远程分支不一定兼容")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("git push -u origin myfeature  \n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);