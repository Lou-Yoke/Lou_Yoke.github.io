(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{518:function(e,t,a){"use strict";a.r(t);var s=a(4),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"关于macos系统上安装软件及配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于macos系统上安装软件及配置"}},[e._v("#")]),e._v(" 关于macOS系统上安装软件及配置")]),e._v(" "),a("p",[e._v("适用于刚刚接触macOS 系统或一直没有一套趁手的安装方式的同学。")]),e._v(" "),a("p",[e._v("macOS 和Windows不同，所以不要把Windows的使用习惯带到 macOS 上 😁")]),e._v(" "),a("h2",{attrs:{id:"homebrew"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#homebrew"}},[e._v("#")]),e._v(" Homebrew")]),e._v(" "),a("p",[e._v("Homebrew是一个包管理器，就相当于 "),a("code",[e._v("yum")]),e._v(" 和 "),a("code",[e._v("apt")]),e._v(" ，通过 Homebrew\n我们可以在macOS上安装软件。它有几个优点，最重要的就是不需要超级管理员权限，比如默认的 "),a("code",[e._v("pip")]),e._v(" 安装一些库的时候，每次都需要 "),a("code",[e._v("sudo")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"安装homebrew"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装homebrew"}},[e._v("#")]),e._v(" 安装Homebrew")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"  \n# 可能会提示你安装Xcode Command Line 耐心等待即可  \n')])])]),a("h2",{attrs:{id:"使用homebrew安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用homebrew安装"}},[e._v("#")]),e._v(" 使用Homebrew安装")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("# python3  \nbrew install python3  \n  \n# nodejs  \nbrew install node@8  \n  \n# jmeter 安装完毕后在 终端 直接输入 jmeter 即可  \nbrew install jmeter  \n  \nbrew install redis  \n  \nbrew install ruby  \n  \nbrew install mysql  \n  \nbrew install maven  \n  \nbrew install git  \n# ...   \n")])])]),a("p",[e._v("遇到目录权限问题"),a("br"),e._v("\n10.13之后，使用HomeBrew安装某些软件可能会遇到目录权限问题")]),e._v(" "),a("p",[e._v("执行一下命令")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo chown -R $(whoami) $(brew --prefix)/*  \n")])])]),a("p",[e._v("如果提示缺少目录，需要先执行创建目录的操作，比如")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo mkdir /usr/local/lib  \nsudo mkdir /usr/local/Frameworks  \n")])])]),a("h2",{attrs:{id:"使用homebrew安装软件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用homebrew安装软件"}},[e._v("#")]),e._v(" 使用Homebrew安装软件")]),e._v(" "),a("p",[e._v("现在 Homebrew 支持安装一些常用的软件，使用 "),a("code",[e._v("brew cask install")]),e._v(" 即可")]),e._v(" "),a("p",[e._v("示例")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("# install java8  \nbrew tap caskroom/versions  \nbrew cask install java8  \n  \n# 推荐使用 iterm2 替代 系统自带的terminal   \nbrew cask install iterm2  \n  \n# chrome  \nbrew cask install google-chrome  \n  \n# sublime  \nbrew cask install sublime-text  \n")])])]),a("h2",{attrs:{id:"zsh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zsh"}},[e._v("#")]),e._v(" ZSH")]),e._v(" "),a("p",[e._v("系统默认自带的是 "),a("code",[e._v("bash")]),e._v(" ，我个人比较喜欢 "),a("code",[e._v("zsh")]),e._v(" ，也是 shell\n的一种，但更灵活，更强大。"),a("a",{attrs:{href:"https://github.com/robbyrussell/oh-my-zsh",target:"_blank",rel:"noopener noreferrer"}},[e._v("相关配置"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"  \n')])])]),a("h2",{attrs:{id:"配置-shadowsocks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-shadowsocks"}},[e._v("#")]),e._v(" 配置 shadowsocks")]),e._v(" "),a("p",[e._v("如果你使用 "),a("code",[e._v("shadowsocks")]),e._v(" 在下载完客户端之后就可以使用了，这里只提醒两点，Git 和 终端 需要额外设置。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("# terminal  \n# 6152或1080 改为你自己的端口号  \nexport https_proxy=http://127.0.0.1:6152;export http_proxy=http://127.0.0.1:6152;export all_proxy=http://127.0.0.1:6152  \n  \n# git  \ngit config --global https.proxy http://127.0.0.1:1080  \ngit config --global https.proxy https://127.0.0.1:1080  \n  \n# or sock  \ngit config --global http.proxy 'socks5://127.0.0.1:1080'  \ngit config --global https.proxy 'socks5://127.0.0.1:1080'  \n")])])]),a("h2",{attrs:{id:"intellij-idea"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#intellij-idea"}},[e._v("#")]),e._v(" IntelliJ IDEA")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("# Java 开发必备工具 IntelliJ IDEA。可以安装 Ultimate Edition：  \nbrew cask install intellij-idea  \n# 也可以安装开源免费的 Community Edition：  \nbrew cask install intellij-idea-ce  \n")])])]),a("h2",{attrs:{id:"关于homebrew更新的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于homebrew更新的问题"}},[e._v("#")]),e._v(" 关于homebrew更新的问题")]),e._v(" "),a("p",[e._v("mac上使用brew install/brew cask install 安装软件总是先updating Homebrew…"),a("br"),e._v("\n速度很慢，网络不好的时候会影响软件的安装。"),a("br"),e._v("\n可以在用户祝目录下的shell配置文件"),a("code",[e._v(".zshrc")]),e._v("中添加：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("# brew 不自动更新  \nexport HOMEBREW_NO_AUTO_UPDATE=true  \n")])])]),a("p",[e._v("取消自动更新brew即可。")]),e._v(" "),a("blockquote",[a("p",[e._v("原文作者: mark"),a("br"),e._v("\n原文链接: "),a("a",{attrs:{href:"https://magaofei.github.io/2018/02/28/43",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://magaofei.github.io/2018/02/28/43"),a("OutboundLink")],1),e._v(". macOS 下常用安装和配置/"),a("br"),e._v("\n许可协议: 知识共享署名-非商业性使用 4.0 国际许可协议")])])])}),[],!1,null,null,null);t.default=r.exports}}]);